
*****************************************************
Summary
-------
Generated at: 2024-12-06T12:35:22+01:00

Notes: 0
Binaries: 0
Archives: 0
Standards: 29

Apache Licensed: 8
Generated Documents: 0

JavaDocs are generated, thus a license header is optional.
Generated files do not require license headers.

21 Unknown Licenses

*****************************************************

Files with unapproved licenses:

  /Users/flo/GitHub/rp-2024/JSON/log4j2.xml
  /Users/flo/GitHub/rp-2024/JSON/RestAPISourceTest.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/pom.xml
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/.mvn/maven.config
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/.mvn/jvm.config
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/test/resources/log4j2.xml
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/test/java/com/example/RestAPISourceTest.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/main/java/com/example/RestAPISource.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/RestAPISourceTest.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/pom.xml
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/.mvn/maven.config
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/.mvn/jvm.config
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/test/resources/log4j2.xml
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/test/java/com/example/RestAPISourceTest.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/main/java/com/example/RestAPISource.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/pom.xml
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/.mvn/maven.config
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/.mvn/jvm.config
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/test/java/com/example/AppTest.java
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/main/java/com/example/tmp.txt
  /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/main/java/com/example/WordcountJava.java

*****************************************************

*****************************************************
  Files with Apache License headers will be marked AL
  Binary files (which do not require any license headers) will be marked B
  Compressed archives will be marked A
  Notices, licenses etc. will be marked N
 !????? /Users/flo/GitHub/rp-2024/JSON/log4j2.xml
 !????? /Users/flo/GitHub/rp-2024/JSON/RestAPISourceTest.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/pom.xml
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/.mvn/maven.config
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/.mvn/jvm.config
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/test/resources/log4j2.xml
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/test/java/com/example/RestAPISourceTest.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/main/java/com/example/RestAPISource.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/RestAPISourceTest.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/pom.xml
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/.mvn/maven.config
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/.mvn/jvm.config
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/test/resources/log4j2.xml
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/test/java/com/example/RestAPISourceTest.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/main/java/com/example/RestAPISource.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/pom.xml
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/.mvn/maven.config
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/.mvn/jvm.config
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/test/java/com/example/AppTest.java
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/main/java/com/example/tmp.txt
 !????? /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/main/java/com/example/WordcountJava.java
  AL    /Users/flo/GitHub/rp-2024/JSON/pom platforms.xml
  AL    /Users/flo/GitHub/rp-2024/JSON/pom.xml
  AL    /Users/flo/GitHub/rp-2024/JSON/RestAPISourceMapping.java
  AL    /Users/flo/GitHub/rp-2024/JSON/Mappings.java
  AL    /Users/flo/GitHub/rp-2024/JSON/JavaPlanBuilder.scala
  AL    /Users/flo/GitHub/rp-2024/JSON/JavaRestAPISource.java
  AL    /Users/flo/GitHub/rp-2024/JSON/RestAPISource.java
  AL    /Users/flo/GitHub/rp-2024/JSON/JavaRestAPISourceTest.java
 
*****************************************************

 Printing headers for text files without a valid license header...
 
=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/log4j2.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
    </Appenders>
    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>
</Configuration>

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/RestAPISourceTest.java
=====================================================
package org.apache.wayang.basic.operators;

// import org.apache.wayang.basic.operators.RestAPISource;
// import org.apache.wayang.core.api.WayangContext;
import org.json.JSONArray;
// import org.json.JSONObject;
import org.junit.Assert;
import org.junit.Test;

public class RestAPISourceTest {

    @Test
    public void testFetchDataFromJsonPlaceholderAPI() {
        // Define API details for JSONPlaceholder
        String apiUrl = "https://jsonplaceholder.typicode.com/posts";
        String apiMethod = "GET";
        String headers = ""; // No headers needed for JSONPlaceholder

        // Create the RestAPISource
        RestAPISource restAPISource = new RestAPISource(apiUrl, apiMethod, headers);

        // Fetch data from the API
        JSONArray responseData = restAPISource.fetchDataFromAPI();

        // Validate the response
        Assert.assertNotNull("The response should not be null.", responseData);
        Assert.assertTrue("The response should be a JSONArray.", responseData instanceof JSONArray);
        Assert.assertTrue("The response should contain at least one object.", responseData.length() > 0);

        // // Print the first 10 entries to the console
        // int entriesToPrint = Math.min(10, responseData.length());
        // for (int i = 0; i < entriesToPrint; i++) {
        //     JSONObject object = responseData.getJSONObject(i);
        //     System.out.println("Entry " + (i + 1) + ": " + object.toString());
        // }
    }

    @Test
    public void testCachedResponse() {
        // Define API details
        String apiUrl = "https://jsonplaceholder.typicode.com/posts";
        String apiMethod = "GET";
        String headers = ""; // No headers needed

        // Create the RestAPISource
        RestAPISource restAPISource = new RestAPISource(apiUrl, apiMethod, headers);

        // Fetch data the first time
        JSONArray firstResponse = restAPISource.fetchDataFromAPI();


=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/pom.xml
=====================================================
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>wayang-restapitest</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>wayang-restapitest</name>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>11</maven.compiler.release>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.11.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- JUnit 5 API -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- JUnit 5 Engine -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Jackson Databind for JSON parsing -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.0</version>
    </dependency>

    <!-- Log4j 2 for logging -->

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/.mvn/maven.config
=====================================================

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/.mvn/jvm.config
=====================================================

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/test/resources/log4j2.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d [%t] %-5level: %msg%n%throwable"/>
        </Console>
    </Appenders>
    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>
</Configuration>

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/test/java/com/example/RestAPISourceTest.java
=====================================================
package com.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class RestAPISourceTest {

    private RestAPISource restAPISource;
    private final Logger logger = LogManager.getLogger(this.getClass());

    @BeforeEach
    public void setup() {
        // Use an API endpoint that returns a JSON array
        String apiURL = "https://jsonplaceholder.typicode.com/posts";
        String apiMethod = "GET";
        String headers = null; // Optional headers if needed

        restAPISource = new RestAPISource(apiURL, apiMethod, headers);
    }

    @Test
    public void testFetchDataFromAPI() {
        JSONArray response = restAPISource.fetchDataFromAPI();
        
        Assertions.assertNotNull(response, "The response from the API should not be null");

        logger.info("API Response: " + response.toString());

        Assertions.assertTrue(response.length() > 0, "The response should not be empty");

        JSONObject firstElement = response.getJSONObject(0);
        logger.info("First API Response: " + firstElement.toString());

        Assertions.assertTrue(firstElement.has("userId"), "The first element should have a 'userId' field");
        Assertions.assertTrue(firstElement.has("id"), "The first element should have an 'id' field");
        Assertions.assertTrue(firstElement.has("title"), "The first element should have a 'title' field");
    }
}

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitest/src/main/java/com/example/RestAPISource.java
=====================================================
package com.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wayang.core.plan.wayangplan.UnarySource;
import org.apache.wayang.core.types.DataSetType;
import org.json.JSONArray;
import org.json.JSONException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class RestAPISource extends UnarySource<JSONArray> {
    private final Logger logger = LogManager.getLogger(this.getClass());
    private final String apiURL;
    private final String apiMethod;
    private final String headers;

    public RestAPISource(String apiURL, String apiMethod, String headers){
        super(DataSetType.createDefault(JSONArray.class));
        this.apiURL = apiURL;
        this.apiMethod = apiMethod;
        this.headers = headers;
    }

    public String getAPIURL() {
        return this.apiURL;
    }

    public String getAPIMethod() {
        return this.apiMethod;
    }

    public String getHeaders() {
        return this.headers;
    }

    public JSONArray fetchDataFromAPI() {
        HttpURLConnection connection = null;
        try {
            URL url = new URL(this.apiURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(this.apiMethod);

            if (this.headers != null) {
                for (String header : this.headers.split(";")) {
                    String[] headerParts = header.split(":");

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/RestAPISourceTest.java
=====================================================
package com.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class RestAPISourceTest {

    private RestAPISource restAPISource;
    private final Logger logger = LogManager.getLogger(this.getClass());

    @BeforeEach
    public void setup() {
        String apiURL = "https://jsonplaceholder.typicode.com/posts/1";
        String apiMethod = "GET";
        String headers = null; // Optional headers if needed

        restAPISource = new RestAPISource(apiURL, apiMethod, headers);
    }

    @Test
    public void testFetchDataFromAPI() {
        InputStream responseStream = restAPISource.fetchDataFromAPI();

        Assertions.assertNotNull(responseStream, "The response stream from the API should not be null");

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(responseStream))) {
            String line;
            int lineCount = 0;
            while ((line = reader.readLine()) != null && lineCount < 5) { 
                logger.info("API Response Line: " + line);  // Log each line of the API response
                lineCount++;
            }
            Assertions.assertTrue(lineCount > 0, "The InputStream should have returned some data.");
        } catch (IOException e) {
            logger.error("Error while reading the InputStream from the API: " + e.getMessage(), e);
            Assertions.fail("Exception occurred during reading InputStream from the API");
        }
    }
}

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/pom.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>wayang-word-count</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>wayang-word-count</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>11</maven.compiler.release>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.11.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
      <!-- JUnit 5 API -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- JUnit 5 Engine -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Jackson Databind for JSON parsing -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.0</version>

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/.mvn/maven.config
=====================================================

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/.mvn/jvm.config
=====================================================

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/test/resources/log4j2.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d [%t] %-5level: %msg%n%throwable"/>
        </Console>
    </Appenders>
    <Loggers>
        <Root level="debug">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>
</Configuration>

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/test/java/com/example/RestAPISourceTest.java
=====================================================
package com.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.apache.wayang.api.JavaPlanBuilder;
import org.apache.wayang.basic.data.Tuple2;
import org.apache.wayang.core.api.Configuration;
import org.apache.wayang.core.api.WayangContext;
import org.apache.wayang.java.Java;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collection;
import java.util.stream.Collectors;

public class RestAPISourceTest {

    private RestAPISource restAPISource;
    private final Logger logger = LogManager.getLogger(this.getClass());

    @BeforeEach
    public void setup() {
        String apiURL = "https://jsonplaceholder.typicode.com/posts/1";
        String apiMethod = "GET";
        String headers = null;

        restAPISource = new RestAPISource(apiURL, apiMethod, headers);
    }

    @Test
    public void testWordCountFromAPI() {
        InputStream responseStream = restAPISource.fetchDataFromAPI();

        Assertions.assertNotNull(responseStream, "The response stream from the API should not be null");

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(responseStream))) {
            String apiData = reader.lines().collect(Collectors.joining("\n"));
            logger.info("Fetched API Data: " + apiData);

            WayangContext wayangContext = new WayangContext(new Configuration())
                    .withPlugin(Java.basicPlugin());
            JavaPlanBuilder planBuilder = new JavaPlanBuilder(wayangContext)
                    .withJobName("WordCount from REST API");

            Collection<Tuple2<String, Integer>> wordCounts = planBuilder

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-restapi-test/wayang-restapitestinputstream/src/main/java/com/example/RestAPISource.java
=====================================================
package com.example;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.wayang.core.plan.wayangplan.UnarySource;
import org.apache.wayang.core.types.DataSetType;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class RestAPISource extends UnarySource<InputStream> {
    private final Logger logger = LogManager.getLogger(this.getClass());
    private final String apiURL;
    private final String apiMethod;
    private final String headers;

    public RestAPISource(String apiURL, String apiMethod, String headers){
        super(DataSetType.createDefault(InputStream.class));
        this.apiURL = apiURL;
        this.apiMethod = apiMethod;
        this.headers = headers;
    }

    public String getAPIURL() {
        return this.apiURL;
    }

    public String getAPIMethod() {
        return this.apiMethod;
    }

    public String getHeaders() {
        return this.headers;
    }

    public InputStream fetchDataFromAPI() {
        HttpURLConnection connection = null;
        try {
            URL url = new URL(this.apiURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(this.apiMethod);
    
            if (this.headers != null) {
                for (String header : this.headers.split(";")) {
                    String[] headerParts = header.split(":");
                    connection.setRequestProperty(headerParts[0].trim(), headerParts[1].trim());
                }
            }

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/pom.xml
=====================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>wayang-word-count</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>wayang-word-count</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>11</maven.compiler.release>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.11.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Optionally: parameterized tests support -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <!--Wayang CORE-->
    <dependency>
      <groupId>org.apache.wayang</groupId>
      <artifactId>wayang-core</artifactId>
      <version>0.7.1</version>
    </dependency>
    <!--Wayang BASIC-->
    <dependency>

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/.mvn/maven.config
=====================================================

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/.mvn/jvm.config
=====================================================

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/test/java/com/example/AppTest.java
=====================================================
package com.example;

import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

/**
 * Unit test for simple App.
 */
public class AppTest {

    /**
     * Rigorous Test :-)
     */
    @Test
    public void shouldAnswerWithTrue() {
        assertTrue(true);
    }
}

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/main/java/com/example/tmp.txt
=====================================================
hello dear how is it going

=====================================================
== File: /Users/flo/GitHub/rp-2024/JSON/old-wordcount/wayang-word-count/src/main/java/com/example/WordcountJava.java
=====================================================
package com.example;

import org.apache.wayang.api.JavaPlanBuilder;
import org.apache.wayang.basic.data.Tuple2;
import org.apache.wayang.core.api.Configuration;
import org.apache.wayang.core.api.WayangContext;
import org.apache.wayang.core.optimizer.cardinality.DefaultCardinalityEstimator;
import org.apache.wayang.java.Java;
import org.apache.wayang.spark.Spark;
import java.util.Collection;
import java.util.Arrays;

public class WordcountJava {

    public static void main(String[] args){

        // Settings
        String inputUrl = "file:/Users/flo/desktop/thesis/rproject/wayang-word-count/src/main/java/com/example/tmp.txt";

        // Get a plan builder.
        WayangContext wayangContext = new WayangContext(new Configuration())
                .withPlugin(Java.basicPlugin())
                .withPlugin(Spark.basicPlugin());
        JavaPlanBuilder planBuilder = new JavaPlanBuilder(wayangContext)
                .withJobName(String.format("WordCount (%s)", inputUrl))
                .withUdfJarOf(WordcountJava.class);

        // Start building the WayangPlan.
        Collection<Tuple2<String, Integer>> wordcounts = planBuilder
                // Read the text file.
                .readTextFile(inputUrl).withName("Load file")

                // Split each line by non-word characters.
                .flatMap(line -> Arrays.asList(line.split("\\W+")))
                .withSelectivity(10, 100, 0.9)
                .withName("Split words")

                // Filter empty tokens.
                .filter(token -> !token.isEmpty())
                .withSelectivity(0.99, 0.99, 0.99)
                .withName("Filter empty words")

                // Attach counter to each word.
                .map(word -> new Tuple2<>(word.toLowerCase(), 1)).withName("To lower case, add counter")

                // Sum up counters for every word.
                .reduceByKey(
                        Tuple2::getField0,
                        (t1, t2) -> new Tuple2<>(t1.getField0(), t1.getField1() + t2.getField1())
                )
